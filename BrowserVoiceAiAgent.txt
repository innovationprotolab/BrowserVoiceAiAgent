javascript: (() => {                      function startSpeechRecognition() {                     const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();                     recognition.lang = 'en-US';                     recognition.interimResults = false;                     recognition.maxAlternatives = 1;                      recognition.start();                      return new Promise((resolve, reject) => {                         recognition.onresult = (event) => {                             const transcript = event.results[0][0].transcript;                             resolve(transcript);                         };                          recognition.onerror = (event) => {                             reject(event.error);                         };                     });                 }                  async function getGroqChatCompletionWithRetry(prompt, retries = 5, delay = 10000) {     const apiKey = "xxx";      const apiUrl = "https://api.groq.com/openai/v1/chat/completions";     let attempt = 0;      while (attempt < retries) {         try {          const response = await fetch(apiUrl, {                 method: "POST",                 headers: {                     "Content-Type": "application/json",                     "Authorization": `Bearer ${apiKey}`,                  },                 body: JSON.stringify({                     model: "deepseek-r1-distill-llama-70b",                     messages: [                         {                             role: "user",                             content: prompt,                         },                     ],                 }),             });              if (!response.ok) {                 if (response.status === 429) {                     const retryAfter = response.headers.get('Retry-After') || delay;                     console.log(``);                     attempt++;                     await new Promise(resolve => setTimeout(resolve, retryAfter));                     continue;                 } else {                     throw new Error(`API request failed with status: ${response.status}`);                 }             }              const data = await response.json();             return data.choices[0].message.content || "";        } catch (error) {             console.error("Error during API request:", error);             return `Error: ${error.message}`;         }     }      return "Error: Max retries reached."; }                  function isElementVisible(element) {                     const style = window.getComputedStyle(element);                     return style.display !== 'none' &&                             style.visibility !== 'hidden' &&                             element.offsetWidth > 0 &&                             element.offsetHeight > 0;                 }                  function extractFormFields() {                     const selectors = [                         "input:not([type='hidden']):not([disabled])",                         "textarea:not([disabled])",                         "select:not([disabled])",                         "button:not([disabled])", "a:not([disabled])",                                             ];                                          const allElements = selectors.flatMap(selector => Array.from(document.querySelectorAll(selector)));                                          const visibleElements = allElements.filter(element => isElementVisible(element));                                          const formFields = visibleElements.map(element => {                         if (element.tagName === "A") {                             return `href: ${element.href}, text: ${element.textContent}`;                          } else if (element.tagName === "INPUT" && (element.type === "checkbox" || element.type === "radio")) {                             return `type: ${element.type}, name: ${element.name}, checked: ${element.checked}`;                         } else if (element.tagName === "INPUT" && element.type === "file") {                             return `type: file, name: ${element.name}`;                         } else if (element.tagName === "INPUT") {                             return `type: ${element.type}, name: ${element.name}, value: ${element.value}`;                         } else if (element.tagName === "SELECT") {                             const selectedOption = element.options[element.selectedIndex];                             return `select: ${element.name}, selected option: ${selectedOption ?%20selectedOption.text%20:%20%22%22}`;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20else%20if%20(element.tagName%20===%20%22TEXTAREA%22)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20`textarea:%20${element.name},%20value:%20${element.value}`;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20else%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20`${element.tagName.toLowerCase()}:%20${element.outerHTML}`;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}).filter(html%20=%3E%20html);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20formFields.join(%22%20%22);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20function%20clearInputFields()%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20inputElements%20=%20document.querySelectorAll(%22input,%20textarea%22);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20inputElements.forEach(element%20=%3E%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(isElementVisible(element)%20&&%20!element.disabled)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20element.value%20=%20%22%22;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20});%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20async%20function%20executeXPathCommand(xpath,%20value%20=%20null,%20delay%20=%202000)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20result%20=%20document.evaluate(xpath,%20document,%20null,%20XPathResult.FIRST_ORDERED_NODE_TYPE,%20null);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(result.singleNodeValue)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20element%20=%20result.singleNodeValue;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(value%20!==%20null)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20element.value%20=%20value;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}if%20(value%20==%20null)%20{%20element.click();}%20else%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20element.click();%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log(``);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20await%20new%20Promise(resolve%20=%3E%20setTimeout(resolve,%20delay));%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(typeof%20element.click%20===%20%27function%27)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20element.click();%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log(``);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20else%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20element.click();%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log(``);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20element;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20else%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20Error(`Element%20not%20found%20for%20XPath:%20${xpath}`);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20async%20function%20main()%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20while%20(true)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20userInput%20=%20%22voice%22;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(userInput%20===%20null%20||%20userInput.toLowerCase()%20===%20%22exit%22)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log(%22Exiting%20the%20program...%22);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20break;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let%20task;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(userInput.toLowerCase()%20===%20%22voice%22)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log(%22Listening...%22);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20task%20=%20await%20startSpeechRecognition();%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log(`You%20said:%20${task}`);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20catch%20(error)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.error(`Speech%20recognition%20error:%20${error}`);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20continue;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20else%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20task%20=%20userInput;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20await%20new%20Promise(resolve%20=%3E%20setTimeout(resolve,%2010000));%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20formContent1%20=%20extractFormFields();%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20chunkSize%20=%201000;%20%20%20%20%20%20%20%20%20%20const%20formContentChunks%20=%20[];%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20(let%20i%20=%200;%20i%20%3C%20formContent1.length;%20i%20+=%20chunkSize)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20formContentChunks.push(formContent1.slice(i,%20i%20+%20chunkSize));%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20(const%20chunk%20of%20formContentChunks)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20promptText%20=%20`%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Please%20provide%20me%20only%20with%20JavaScript%20code%20that%20automates%20the%20following%20task%20into%20a%20page%20using%20XPath%20selectors:%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Task:%20Find%20elements%20in%20this%20instruction:%20${task}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Form%20content:%20${chunk}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20The%20code%20should:%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%201.%20Use%20XPath%20selectors%20to%20locate%20elements.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%202.%20Start%20with%20%27document.%27%20for%20all%20actions.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%203.%20Be%20concise%20and%20specific%20to%20the%20task.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Example:%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20document.evaluate(%22//input[@name=%27username%27]%22,%20document,%20null,%20XPathResult.FIRST_ORDERED_NODE_TYPE,%20null).singleNodeValue.value%20=%20%22example_text%22;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20document.evaluate(%22//input[@name=%27username%27]%22,%20document,%20null,%20XPathResult.FIRST_ORDERED_NODE_TYPE,%20null).singleNodeValue.click();%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20`;%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20response%20=%20await%20getGroqChatCompletionWithRetry(promptText);%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20lines%20=%20response.split(%27\n%27).filter(line%20=%3E%20line.trim().startsWith(%27document.evaluate%27));%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20uniqueLines%20=%20[...new%20Set(lines)];%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20(const%20line%20of%20uniqueLines)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20try%20{%20%20%20%20%20%20%20%20%20const%20xpathMatch%20=%20line.match(/document\.evaluate\(%22([^%22]+)%22/);%20%20%20%20%20const%20valueMatch%20=%20line.match(/\.value\s*=\s*%22([^%22]+)%22/);%20%20%20%20%20const%20clickMatch%20=%20line.match(/\.click\(\);/);%20%20%20%20%20%20if%20(xpathMatch)%20{%20%20%20%20%20%20%20%20%20const%20xpath%20=%20xpathMatch[1];%20%20%20%20%20%20%20%20%20%20if%20(valueMatch)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20const%20value%20=%20valueMatch[1];%20%20%20%20%20%20%20%20%20%20%20%20%20await%20executeXPathCommand(xpath,%20value,%203000);%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%20if%20(clickMatch)%20{%20%20%20%20%20%20%20%20%20%20%20%20%20await%20executeXPathCommand(xpath,%20null,%203000);%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%20{%20%20%20%20%20%20%20%20%20%20%20%20%20await%20executeXPathCommand(xpath,%20null,%203000);%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20await%20new%20Promise(resolve%20=%3E%20setTimeout(resolve,%202000));%20%20%20%20%20%20}%20}%20catch%20(error)%20{%20%20%20%20%20console.error(`Error%20executing%20line:%20${line}`);%20%20%20%20%20console.error(`Error:%20${error.message}`);%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20}%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20main();%20})();